env:
    browser: true
    node: true
    es6: true
    jest/globals: true

plugins:
    - '@typescript-eslint'
    - react-hooks
    - simple-import-sort
    - jest
    - testing-library

extends:
    - eslint:recommended
    - plugin:@typescript-eslint/eslint-recommended
    - plugin:@typescript-eslint/recommended
    - plugin:react/recommended
    - plugin:react-hooks/recommended
    - plugin:jest/recommended
    - plugin:testing-library/react
    - prettier

parser: '@typescript-eslint/parser'

parserOptions:
    ecmaVersion: 6
    sourceType: module
    project: './tsconfig.json'

settings:
    react:
        version: detect

rules:
    # Core ESLint: beyond recommended
    accessor-pairs: ['error']
    array-bracket-newline: ['warn', { multiline: true }]
    array-bracket-spacing: ['warn', 'never']
    array-callback-return: ['error']
    array-element-newline: ['warn', 'consistent']
    arrow-body-style: ['warn', 'as-needed']
    arrow-parens: ['warn', 'always'] # 'always' only with Typescript, otherwise as-needed
    arrow-spacing: ['warn', { before: true, after: true }]
    block-spacing: ['warn', 'always']
    comma-dangle: ['warn', 'always-multiline']
    comma-style: ['warn', 'last']
    complexity: ['error', 10]
    computed-property-spacing: ['warn', 'never']
    curly: ['warn', 'all']
    default-case-last: ['error']
    dot-location: ['warn', 'property']
    eol-last: ['warn', 'always']
    eqeqeq: ['warn', 'always']
    func-names: ['error', 'as-needed']
    function-call-argument-newline: ['warn', 'consistent']
    # function-paren-newline: ['warn', 'multiline'] // works bad with React
    generator-star-spacing: ['warn', { before: false, after: true }]
    grouped-accessor-pairs: ['error']
    guard-for-in: ['error']
    id-denylist: ['error', 'err', 'e', 'cb']
    id-length: ['error', { min: 1, max: 25, properties: 'always' }]
    jsx-quotes: ['warn', 'prefer-double']
    key-spacing: ['warn', { beforeColon: false, afterColon: true, mode: 'strict' }]
    linebreak-style: ['warn', 'unix']
    max-depth: ['error', { max: 4 }]
    max-len:
        [
            'error',
            {
                code: 120,
                ignoreComments: true,
                ignoreUrls: true,
                ignoreStrings: true,
                ignoreTemplateLiterals: true,
                ignoreRegExpLiterals: true,
            },
        ]
    max-params: ['error', 3]
    newline-per-chained-call: ['warn', { ignoreChainWithDepth: 2 }]
    no-alert: ['error']
    no-console: ['error']
    no-constructor-return: ['error']
    no-duplicate-imports: ['error', { includeExports: true }]
    no-else-return: ['warn']
    no-eval: ['error']
    no-extend-native: ['error']
    no-extra-bind: ['warn']
    no-floating-decimal: ['warn']
    no-implicit-coercion: ['warn']
    no-implied-eval: ['error']
    no-labels: ['error']
    no-lone-blocks: ['error']
    no-lonely-if: ['warn']
    no-loop-func: ['error']
    no-multi-assign: ['error']
    no-multi-spaces: ['warn']
    no-multi-str: ['error']
    no-multiple-empty-lines: ['warn', { max: 1, maxBOF: 0, maxEOF: 0 }]
    no-negated-condition: ['error']
    no-nested-ternary: ['error']
    no-new-func: ['error']
    no-new-object: ['error']
    no-new-wrappers: ['error']
    no-new: ['error']
    no-octal-escape: ['error']
    no-param-reassign: ['error', { props: false }]
    no-return-assign: ['error', 'always']
    no-self-compare: ['error']
    no-sequences: ['error']
    no-shadow: ['off']
    no-throw-literal: ['error']
    no-trailing-spaces: ['warn']
    no-undef-init: ['warn']
    no-unmodified-loop-condition: ['error']
    no-unneeded-ternary: ['warn']
    no-useless-call: ['error']
    no-useless-concat: ['error']
    no-useless-rename: ['warn']
    no-useless-return: ['warn']
    no-whitespace-before-property: ['warn']
    object-curly-newline: ['warn', { consistent: true }]
    object-curly-spacing: ['warn', 'always']
    object-shorthand: ['warn']
    padded-blocks: ['warn', { classes: 'always', blocks: 'never', switches: 'never' }]
    prefer-arrow-callback: ['warn']
    prefer-destructuring: ['warn', { object: true, array: true }]
    prefer-exponentiation-operator: ['warn']
    prefer-object-spread: ['warn']
    prefer-promise-reject-errors: ['error', { allowEmptyReject: true }]
    prefer-regex-literals: ['error', { disallowRedundantWrapping: true }]
    prefer-template: ['warn']
    quote-props: ['warn', 'as-needed']
    rest-spread-spacing: ['error', 'never']
    space-before-blocks: ['warn', 'always']
    space-in-parens: ['warn', 'never']
    space-infix-ops: ['warn']
    space-unary-ops: ['warn', { words: true, nonwords: false }]
    spaced-comment: ['warn', 'always']
    switch-colon-spacing: ['warn', { after: true, before: false }]
    symbol-description: ['error']
    template-curly-spacing: ['warn', 'never']
    template-tag-spacing: ['warn', 'never']
    yield-star-spacing: ['warn', { before: true, after: false }]
    yoda: ['warn', 'never']

    # turned off because of Typescript see @typescript-eslint/eslint-recommended:
    #
    # no-array-constructor: ['error']
    # no-var: ['warn']
    # prefer-const: ['warn', { destructuring: 'all' }]
    # prefer-rest-params: ['error']
    # prefer-spread: ['error']
    # require-await: ['error']
    # camelcase: ['error', { properties: 'always', ignoreDestructuring: false, ignoreImports: false, ignoreGlobals: false }] - in favor of @typescript-eslint/naming-convention
    #
    # turned off and replaced below:
    brace-style: ['off']
    comma-spacing: ['off']
    default-param-last: ['off']
    dot-notation: ['off']
    func-call-spacing: ['off']
    indent: ['off']
    keyword-spacing: ['off']
    lines-between-class-members: ['off']
    no-extra-parens: ['off']
    no-invalid-this: ['off']
    no-return-await: ['off']
    no-unused-expressions: ['off']
    no-useless-constructor: ['off']
    quotes: ['off']
    semi: ['off']
    space-before-function-paren: ['off']
    '@typescript-eslint/brace-style': ['warn', '1tbs']
    '@typescript-eslint/comma-spacing': ['warn', { before: false, after: true }]
    '@typescript-eslint/default-param-last': ['error']
    '@typescript-eslint/dot-notation': ['warn']
    '@typescript-eslint/func-call-spacing': ['warn', 'never']
    '@typescript-eslint/keyword-spacing': ['warn', { before: true, after: true }]
    '@typescript-eslint/lines-between-class-members': ['warn', { exceptAfterOverload: true }]
    '@typescript-eslint/no-shadow': ['error']
    '@typescript-eslint/no-invalid-this': ['error']
    '@typescript-eslint/no-unused-expressions':
        ['error', { allowShortCircuit: false, allowTernary: false, allowTaggedTemplates: false }]
    '@typescript-eslint/no-useless-constructor': ['error']
    '@typescript-eslint/return-await': ['warn', 'in-try-catch']

    # Typescript: beyond recommended
    '@typescript-eslint/array-type': ['warn', { default: 'array' }]
    '@typescript-eslint/consistent-type-definitions': ['warn', 'interface']
    '@typescript-eslint/explicit-function-return-type':
        [
            'error',
            {
                allowExpressions: false,
                allowTypedFunctionExpressions: true,
                allowHigherOrderFunctions: true,
                allowConciseArrowFunctionExpressionsStartingWithVoid: true,
            },
        ]
    '@typescript-eslint/explicit-module-boundary-types': ['off'] # recommended rule covered by @typescript-eslint/explicit-function-return-type
    '@typescript-eslint/method-signature-style': ['warn', 'property']
    '@typescript-eslint/naming-convention':
        [
            'error',
            {
                selector: 'memberLike',
                format: ['camelCase', 'PascalCase'],
                leadingUnderscore: 'allow',
                trailingUnderscore: 'allow',
            },
            {
                selector: 'variableLike',
                format: ['camelCase', 'UPPER_CASE', 'PascalCase'],
                leadingUnderscore: 'allow',
                trailingUnderscore: 'forbid',
            },
            { selector: 'typeLike', format: ['PascalCase'] },
        ]
    '@typescript-eslint/no-base-to-string': ['error', { ignoredTypeNames: ['RegExp'] }]
    '@typescript-eslint/no-confusing-non-null-assertion': ['warn']
    '@typescript-eslint/no-dynamic-delete': ['error']
    '@typescript-eslint/no-extraneous-class':
        [
            'error',
            {
                allowConstructorOnly: false,
                allowEmpty: false,
                allowStaticOnly: false,
                allowWithDecorator: false,
            },
        ]
    '@typescript-eslint/no-invalid-void-type': ['error']
    '@typescript-eslint/no-require-imports': ['error']
    '@typescript-eslint/no-unnecessary-boolean-literal-compare':
        [
            'warn',
            {
                allowComparingNullableBooleansToTrue: false,
                allowComparingNullableBooleansToFalse: false,
            },
        ]
    '@typescript-eslint/no-unnecessary-qualifier': ['warn']
    '@typescript-eslint/prefer-for-of': ['error']
    '@typescript-eslint/prefer-function-type': ['warn']
    '@typescript-eslint/prefer-includes': ['warn']
    '@typescript-eslint/prefer-literal-enum-member': ['error']
    '@typescript-eslint/prefer-nullish-coalescing': ['off'] # it's deceiving
    '@typescript-eslint/prefer-optional-chain': ['error']
    '@typescript-eslint/prefer-reduce-type-parameter': ['warn']
    '@typescript-eslint/prefer-string-starts-ends-with': ['warn']
    '@typescript-eslint/require-array-sort-compare': ['error']
    '@typescript-eslint/type-annotation-spacing': ['warn']
    '@typescript-eslint/unified-signatures': ['error']

    # react: beyond recommended
    react/default-props-match-prop-types: ['error', { allowRequiredDefaults: false }]
    react/function-component-definition: ['warn', { namedComponents: arrow-function }]
    react/jsx-boolean-value: ['warn', 'never']
    react/jsx-closing-bracket-location: ['warn', 'tag-aligned']
    react/jsx-curly-brace-presence: ['warn', { props: 'never', children: 'never' }]
    react/jsx-curly-newline: ['warn', { multiline: 'consistent', singleline: 'forbid' }]
    react/jsx-curly-spacing: ['warn', { when: 'never', children: true }]
    react/jsx-equals-spacing: ['warn', 'never']
    react/jsx-first-prop-new-line: ['warn', 'multiline-multiprop']
    react/jsx-fragments: ['warn', 'syntax']
    react/jsx-indent: ['warn', 4, { checkAttributes: true, indentLogicalExpressions: true }]
    react/jsx-no-bind: ['error']
    react/jsx-no-useless-fragment: ['warn']
    react/jsx-pascal-case: ['error']
    react/jsx-props-no-multi-spaces: ['warn']
    react/jsx-tag-spacing:
        [
            'warn',
            {
                closingSlash: 'never',
                beforeSelfClosing: 'always',
                afterOpening: 'never',
                beforeClosing: 'never',
            },
        ]
    react/jsx-wrap-multilines:
        [
            'warn',
            {
                declaration: 'ignore',
                assignment: 'ignore',
                return: 'parens-new-line',
                arrow: 'ignore',
                condition: 'ignore',
                logical: 'ignore',
                prop: 'ignore',
            },
        ]
    react/no-access-state-in-setstate: ['error']
    react/no-adjacent-inline-elements: ['error']
    react/no-redundant-should-component-update: ['error']
    react/no-this-in-sfc: ['error']
    react/no-typos: ['error']
    react/no-unused-prop-types: ['error']
    react/no-unused-state: ['error']
    react/no-will-update-set-state: ['error']
    react/prefer-es6-class: ['error', 'always']
    react/prop-types: ['off']
    react/require-default-props:
        ['error', { forbidDefaultForRequired: true, ignoreFunctionalComponents: true }]
    react/self-closing-comp: ['warn', { component: true, html: true }]
    react/sort-comp: ['warn']
    react/static-property-placement: ['error', 'static public field']
    react/style-prop-object: ['error']
    react/void-dom-elements-no-children: ['error']
    react/react-in-jsx-scope: ['off']
    # react/jsx-closing-tag-location: ['warn'] - buggy

    simple-import-sort/sort: ['warn']

overrides:
    - files: 
      - '**/*.js'
      rules:
          '@typescript-eslint/typedef': ['off']
          '@typescript-eslint/no-require-imports': ['off']
          '@typescript-eslint/explicit-function-return-type': ['off']
          '@typescript-eslint/no-var-requires': ['off']
          '@typescript-eslint/prefer-optional-chain': ['off']

    - files:
      - '**/*.stories.tsx'
      rules:
        jest/no-mocks-import: off
