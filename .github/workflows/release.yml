name: 'Push tags'

on:
  push:
    tags:
      - v*

env:
  NODE_VERSION: 14

jobs:
  publish-tarball-npm:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      VERSION: ${{ steps.get-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2

      - name: get tag
        id: get-tag
        uses: olegtarasov/get-tag@v2.1
        with:
          tagRegex: 'v(.+)'

      - name: setup npm
        uses: ./.github/actions/setup-npm
        with:
          global_artifactory_token: ${{ secrets.GLOBAL_JFROG_ARTIFACTORY_TOKEN }}
          node_version: ${{ env.NODE_VERSION }}
      - run: npm config set //registry.npmjs.org/:_authToken ${{ secrets.GLOBAL_NPM_TOKEN }}

      - name: set package.json version
        run: npm version $GIT_TAG_NAME --commit-hooks=false --git-tag-version=false

      - name: build
        run: npm run build -- --env tagName=$GIT_TAG_NAME

      - name: prepare tarball
        run: npm pack

      - name: save tarball artifact
        uses: actions/upload-artifact@v2
        with:
          name: tarball
          path: dazn-landing-page-experiments-${{ steps.get-tag.outputs.tag }}.tgz

      - name: publish package
        run: npm publish dazn-landing-page-experiments-${GIT_TAG_NAME}.tgz

  upload-tarball-indazn:
    runs-on: ubuntu-latest
    needs: [publish-tarball-npm]
    container:
      image: docker://707907454361.dkr.ecr.eu-central-1.amazonaws.com/package-upload-ci-plugin:v2
      credentials:
        username: AWS
        password: ${{ secrets.GLOBAL_ECR_707907454361_DKR_ECR_EU_CENTRAL_1_AMAZONAWS_COM_PASSWORD }}

    timeout-minutes: 1

    outputs:
      VERSION: ${{ needs.publish-tarball-npm.outputs.VERSION }}

    steps:
      - name: fetch tarball artifact
        uses: actions/download-artifact@v2
        with:
          name: tarball

      - name: upload package to https://pkg.fe.indazn.com
        run: uploadPackage
        env:
          PLUGIN_PACKAGE_NAME: '@dazn/landing-page-experiments'
          PLUGIN_VERSION: ${{ needs.publish-tarball-npm.outputs.VERSION }}
          PLUGIN_PACKAGE_LOADER_ENV: prod
          VAULT_FE_PIPELINES_TOKEN: ${{ secrets.VAULT_CI_TOKEN_FE_PIPELINES_PROD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GLOBAL_NEWRELIC_TEST_API_KEY: ${{ secrets.GLOBAL_NEWRELIC_TEST_API_KEY }}
          GLOBAL_NEWRELIC_STAGE_API_KEY: ${{ secrets.GLOBAL_NEWRELIC_STAGE_API_KEY }}
          GLOBAL_NEWRELIC_PROD_API_KEY: ${{ secrets.GLOBAL_NEWRELIC_PROD_API_KEY }}

  stage-deployment:
    uses: ./.github/workflows/deployment.trigger.yml
    needs: [upload-tarball-indazn]
    with:
      domain_id: live
      environment_id: staging
      environment_label: stage
      version: ${{ needs.upload-tarball-indazn.outputs.VERSION }}
    secrets:
      VAULT_CI_TOKEN_FE_PIPELINES_PROD: ${{ secrets.VAULT_CI_TOKEN_FE_PIPELINES_PROD }}
      GLOBAL_GITHUB_TOKEN: ${{ secrets.GLOBAL_GITHUB_TOKEN }}
      GLOBAL_GITHUB_TOKEN_D: ${{ secrets.GLOBAL_GITHUB_TOKEN_D }}
      GLOBAL_LEXI_TOKEN: ${{ secrets.GLOBAL_LEXI_TOKEN }}
