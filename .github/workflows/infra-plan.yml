name: Plan Infrastructure

on:
  pull_request:
    types: 
      - 'opened'
      - 'reopened' 
      - 'synchronize'
    paths:
      - 'infrastructure/**'

env:
  AWS_REGION: eu-central-1

jobs:
  infra-plan:
    runs-on: ubuntu-20.04
    timeout-minutes: 3

    strategy:
      matrix:
        env: ["stage", "prod"]

    steps:
      - uses: actions/checkout@v2

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      
      - uses: getndazn/plat-gha-action/terraform/plan@main
        id: plan
        with:
          global_github_token: ${{ secrets.GLOBAL_GITHUB_TOKEN }}
          sha: ${{ github.sha }}
          env: ${{ matrix.env }}
          tf_dir: infrastructure
          tf_version: 1.0.11
          tf_vars_file: variables.tfvars
          tf_vars: region=${{ env.AWS_REGION }}

      - id: show
        run: terraform show -no-color plan.tfout
        working-directory: infrastructure

      - name: setup comment dependencies
        run: |
          rm package-lock.json
          rm package.json
          npm i outdent@0.8.0

      - name: comment plan on the PR
        uses: actions/github-script@v5
        env:
          environment: ${{ matrix.env }}
          plan_outcome: ${{ steps.plan.outcome }}
          plan_log: ${{ steps.show.outputs.stdout }}
        with:
          script: |
            const { addComment, updateComment, getPreviousComment } = require('./.github/scripts/pr-comment/utils.js');
            const { getMessage, getTitle } = require('./.github/scripts/pr-comment/tf-plan.js');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ['issue_number']: context.issue.number,
            });

            const { environment, plan_outcome, plan_log } = process.env;

            const message = getMessage({ require, environment }, plan_outcome, plan_log);
            const previousComment = getPreviousComment(comments, getTitle(environment));

            const createComment = previousComment
              ? updateComment({ context, require, github }, previousComment.id, message)
              : addComment({ context, require, github }, message);

            await createComment;
